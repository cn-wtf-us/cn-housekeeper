Service
    官方笔记：https://developer.android.com/guide/components/services.html

    服务启动有两种方式：
        startService();
            一但开启服务，不管启动它的组件是否被销毁，就一直在后台运行，直到调用stopSelf或
            stopService();举例，下载文件
        bindService();
            一旦绑定服务，只有当所有启动它的组件销毁之后，它才会被销毁；客户端和服务端的一种模式

           onStartCommand();
                当服务是以startService()的方式启动的，会调用此方法
           onBind();
                 当服务是以bindService()的方式启动的，会调用此方法
           onCreate();
                 不管以何种方式启动服务，都会调用此方法，只会调用一次(服务在运行，不会调用)
           onDestroy();
                 不管以何种方式启动服务，当服务销毁的时候，都会调用此方法
                 释放资源，比如，关闭下载任务的线程，等等

    如同 Activity（以及其他组件）一样，您必须在应用的清单文件中声明所有服务,否则程序一定挂。
    <manifest ... >
      ...
      <application ... >
          <service android:name=".ExampleService" />
          ...
      </application>
    </manifest>

    从传统上讲，您可以扩展两个类来创建启动服务：
    Service   通用
        这是适用于所有服务的基类。扩展此类时，必须创建一个用于执行所有服务工作的新线程，
        因为默认情况下，服务将使用应用的主线程，这会降低应用正在运行的所有 Activity 的性能。
    IntentService  处理单个请求 自带一个工作线程
        这是 Service 的子类，它使用工作线程逐一处理所有启动请求。
        如果您不要求服务同时处理多个请求，这是最好的选择。
        您只需实现 onHandleIntent() 方法即可，该方法会接收每个启动请求的 Intent，
        使您能够执行后台工作。



